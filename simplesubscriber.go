package tipboardsubscriber

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"
)

//SimpleSubscriber - A struct to maintain a single 'just-value' tile on the MQTT broker tipboard
type SimpleSubscriber struct {
	Dashboard   TipboardDash //dashboard to push the updates to
	TileKey     string       //key to identify the tile to push to
	Title       string       //title to be pushed in the tile data
	Description string       //description text to push to the tile
	Value       int          //the value to be pushed to the tile
}

//curl http://localhost:7272/api/v0.1/13446d45c9544d4da0b981bd946de743/push -X POST -d "tile=just_value" -d "key=clients_total" -d 'data={"title": "Total:", "description": "(Total number of registered clients)", "just-value": "3"}'

//Subscribe to the designated broker and topic
//when a message is received, a single integer value is extracted and pushed to the tile as an update.
func (s *SimpleSubscriber) Subscribe(brokerHost string, brokerPort int, topic string) (ok bool) {
	//subscribe to the specified broker and topic

	//push the value to the dashboard

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	//fmt.Println("subs", s.Value)
	//fmt.Println("dash", s.Dashboard.DashHost)

	urlStr := "http://" + s.Dashboard.DashHost + ":" + strconv.Itoa(s.Dashboard.DashPort) + "/api/v0.1/" + s.Dashboard.DashAPIKey + "/push"
	//fmt.Println("URL", urlStr)
	//bodyStr := "tile=just_value&key=clients_connected&data={\"title\": \"Connected:\", \"description\": \"(Currently Connected Clients)\", \"just-value\": \"343\"}"
	bodyStr := "tile=just_value&key=" + s.TileKey + "&data={\"title\": \"" + s.Title + ":\", \"description\": \"" + s.Description + "\", \"just-value\": \"" + strconv.Itoa(s.Value) + "\"}"

	//fmt.Println("URL", bodyStr)
	//body := strings.NewReader(`tile=just_value&key=clients_connected&data={"title": "Connected:", "description": "(Currently Connected Clients)", "just-value": "39"}`)
	//body := strings.NewReader(`tile=just_value&key=clients_connected&data={"title": "Connected:", "description": "(Currently Connected Clients)", "just-value": "341"}`)
	body := strings.NewReader(bodyStr)
	//req, err := http.NewRequest("POST", "http://"+s.Dashboard.DashHost+":"+string(s.Dashboard.DashPort)+"/api/v0.1/"+s.Dashboard.DashAPIKey+"/push", body)

	req, err := http.NewRequest("POST", urlStr, body)
	if err != nil {
		// handle err
		fmt.Println("balls")
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		fmt.Println("feck")
	}
	defer resp.Body.Close()
	return
}

/*

apiUrl := "https://api.com"
    resource := "/user/"
    data := url.Values{}
    data.Set("name", "foo")
    data.Add("surname", "bar")

    u, _ := url.ParseRequestURI(apiUrl)
    u.Path = resource
    urlStr := u.String() // 'https://api.com/user/'

    client := &http.Client{}
    r, _ := http.NewRequest("POST", urlStr, strings.NewReader(data.Encode())) // URL-encoded payload
    r.Header.Add("Authorization", "auth_token=\"XXXXXXX\"")
    r.Header.Add("Content-Type", "application/x-www-form-urlencoded")
    r.Header.Add("Content-Length", strconv.Itoa(len(data.Encode())))

    resp, _ := client.Do(r)
    fmt.Println(resp.Status)

*/
