package tipboardsubscriber

import (
	"net/http"
	"strings"
)

//SimpleSubscriber - A struct to maintain a single 'just-value' tile on the MQTT broker tipboard
type SimpleSubscriber struct {
	dashboard   TipboardDash //dashboard to push the updates to
	tileKey     string       //key to identify the tile to push to
	title       string       //title to be pushed in the tile data
	description string       //description text to push to the tile
	value       int          //the value to be pushed to the tile
}

//curl http://localhost:7272/api/v0.1/13446d45c9544d4da0b981bd946de743/push -X POST -d "tile=just_value" -d "key=clients_total" -d 'data={"title": "Total:", "description": "(Total number of registered clients)", "just-value": "3"}'

//Subscribe to the designated broker and topic
//when a message is received, a single integer value is extracted and pushed to the tile as an update.
func (s SimpleSubscriber) Subscribe(brokerHost string, brokerPort int, topic string) (ok bool) {
	//subscribe to the specified broker and topic

	//push the value to the dashboard

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	body := strings.NewReader(`tile=just_value&key=clients_connected&data={"title": "Connected:", "description": "(Currently Connected Clients)", "just-value": "23"}`)
	req, err := http.NewRequest("POST", "http://localhost:7272/api/v0.1/13446d45c9544d4da0b981bd946de743/push", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()
	return
}
